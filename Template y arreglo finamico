template <typename T>

class DynamicArray {

private:

    T* arr; // Puntero al arreglo

    int size; // Tamaño actual del arreglo

    int capacity; // Capacidad máxima del arreglo

public:

    DynamicArray() {

        size = 0;

        capacity = 1;

        arr = new T[capacity];

    }

    ~DynamicArray() {

        delete[] arr;

    }

    void push_back(const T& value) {

        if (size == capacity) {

            // Si el arreglo está lleno, se duplica su capacidad

            capacity *= 2;

            T* new_arr = new T[capacity];

            for (int i = 0; i < size; i++) {

                new_arr[i] = arr[i];

            }

            delete[] arr;

            arr = new_arr;

        }

        arr[size] = value;

        size++;

    }

    void insert(int index, const T& value) {

        if (index < 0 || index > size) {

            throw std::out_of_range("Índice fuera de rango");

        }

        if (size == capacity) {

            // Si el arreglo está lleno, se duplica su capacidad

            capacity *= 2;

            T* new_arr = new T[capacity];

            for (int i = 0; i < index; i++) {

                new_arr[i] = arr[i];

            }

            new_arr[index] = value;

            for (int i = index; i < size; i++) {

                new_arr[i + 1] = arr[i];

            }

            delete[] arr;

            arr = new_arr;

        } else {

            for (int i = size; i > index; i--) {

                arr[i] = arr[i - 1];

            }

            arr[index] = value;

        }

        size++;

    }

    void remove(int index) {

        if (index < 0 || index >= size) {

            throw std::out_of_range("Índice fuera de rango");

        }

        for (int i = index; i < size - 1; i++) {

            arr[i] = arr[i + 1];

        }

        size--;

        // Reducir capacidad si el tamaño es menor que la mitad de la capacidad actual

        if (size < capacity / 2) {

            capacity /= 2;

            T* new_arr = new T[capacity];

            for (int i = 0; i < size; i++) {

                new_arr[i] = arr[i];

            }

            delete[] arr;

            arr = new_arr;

        }

    }

    T at(int index) {

        if (index < 0 || index >= size) {

            throw std::out_of_range("Índice fuera de rango");

        }

        return arr[index];

    }

    int getSize() {

        return size;

    }

};

DynamicArray<int> arr;

arr.push_back(1);

arr.push_back(2);

arr.push_back(3);

arr.insert(1, 4); // Insertar el valor 4 en la posición 1

arr.remove(2); //

