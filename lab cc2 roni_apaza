
#include <iostream>
#include<memory>
using namespace std;
/*class Rectangulo {
private:
    int longitud, ancho;
};
void fun() {
    Rectangulo* R = new Rectangulo();
}*/
/*class SmartPtr {
    int* ptr;
public:
    explicit SmartPtr(int* p = NULL) { ptr = p; }
    ~SmartPtr() { delete(ptr); }
    int& operator*() { return *ptr; }
    friend ostream& operator<<(ostream& output, SmartPtr ptr) { output << ptr.ptr; return output; }
};
int main(){
    //while(1){
    //    fun();
    //}
    SmartPtr ptr(new int());
    *ptr = 20;
    cout << *ptr<<" " << &ptr << " " <<ptr;
}
    return 0;
*/
/*
template<class T>class SmartPtr {
    T* ptr;
public:
    explicit SmartPtr(T* p = NULL) { ptr = p; }
    ~SmartPtr() { delete(ptr); }
    T& operator*() { return *ptr; }
    T& operator->() { return ptr; }
};
int main() {
    SmartPtr<int>ptr(new int());
    *ptr = 20;
    cout << *ptr<<" " << &ptr;
    return 0;
}
*/
/*
class Rectangulo
{

private:
    int ancho, longitud;
public:
    Rectangulo(int l,int b) {
        longitud = l;
        ancho = b;
    };
    int area() { return longitud * ancho; }

};
int main() {
    unique_ptr<Rectangulo> P1(new Rectangulo(10, 5));
    cout << P1->area() << endl;
    unique_ptr<Rectangulo>P2;
    P2 = move(P1);
    cout << P2->area() << endl;
    //cout << P1->area() << endl;
    return 0;
}
*/
class Rectangulo
{

private:
    int longitud, ancho;
public:
    Rectangulo(int l,int b) {
        longitud = l;
        ancho = b;
    };
    int area() { return ancho * longitud; }
};
int main() {
    shared_ptr<Rectangulo>P1(new Rectangulo(10, 5));
    cout << P1->area() << endl;
    shared_ptr<Rectangulo>P2;
    P2 = P1;
    cout << P2->area() << endl;
    cout << P1->area() << endl;
    cout << P1.use_count() << endl;
    return 0;
}
// ConsoleApplication1.cpp : Este archivo contiene la función "main". La ejecución del programa comienza y termina ahí.
//
/*
#include <iostream>
#include<type_traits>
#include<typeinfo>
class SmallSize{};
class BigSize{};
template<class T>
using ContainerType =
typename std::conditional<sizeof(T) == 1, SmallSize, BigSize>::type;
int main()
{
    ContainerType<bool>b;
    std::cout << typeid(b).name() << "\n";
    ContainerType<int>i;
    std::cout << typeid(i).name() << "\n";

    return 0;
}
*/
// Ejecutar programa: Ctrl + F5 o menú Depurar > Iniciar sin depurar
// Depurar programa: F5 o menú Depurar > Iniciar depuración

// Sugerencias para primeros pasos: 1. Use la ventana del Explorador de soluciones para agregar y administrar archivos
//   2. Use la ventana de Team Explorer para conectar con el control de código fuente
//   3. Use la ventana de salida para ver la salida de compilación y otros mensajes
//   4. Use la ventana Lista de errores para ver los errores
//   5. Vaya a Proyecto > Agregar nuevo elemento para crear nuevos archivos de código, o a Proyecto > Agregar elemento existente para agregar archivos de código existentes al proyecto
// 6. En el futuro, para volver a abrir este proyecto, vaya a Archivo > Abrir > Proyecto y seleccione el archivo .sln

/*#include<iostream>
#include<type_traits>
class Class{};
int main()
{
    std::cout << std::is_floating_point<Class>::value<<"\n";
    std::cout << std::is_floating_point<float>::value << "\n";
    std::cout << std::is_floating_point<int>::value << "\n";
    std::cout << std::is_floating_point<double>::value << "\n";

    return 0;
}
*/
/*
#include<iostream>
#include<type_traits>
using namespace std;
int main() {
    cout << boolalpha << endl;
    cout << "is null pointer: " << endl;
    cout << " int *&: "
        <<
        is_null_pointer<decltype(nullptr)>::value<<endl;
    cout << "int *[10]: "
        << is_null_pointer<int* [10]>::value
        << endl;
    cout << "float *:"
        << is_null_pointer<float*>::value
        << endl;
    cout << "int [10]: "
        << is_null_pointer<int [10]>::value
        << endl;
    return 0;

}
*/
/*
#include<iostream>
#include<type_traits>
using namespace std;
int main() {
    cout << boolalpha
        <<
        is_null_pointer<decltype(nullptr)>::value
        << endl
        << is_null_pointer<int*>::value
        << endl
        <<
        is_pointer<decltype(nullptr)>::value
        << endl
        << is_pointer<int*>::value
        << endl;
    return 0;
}
*/
/*
#include<iostream>
#include<type_traits>
using namespace std;
class GFG {

};
int main() {
    cout << alignment_of<GFG>::value << endl;
    cout << alignment_of<int>() << endl;
    cout << alignment_of<double>() << endl;
    cout << alignment_of<float>() << endl;
    cout << alignment_of<char>() << endl;
    cout << alignment_of<string>() << endl;
    return 0;
}
*/
#include<iostream>
#include<type_traits>
using namespace std;
class A{};
int main() {
    cout << boolalpha;
    cout << is_array<A>::value << endl;
    cout << is_array<A[]>::value << endl;
    cout << is_array<A[3]>::value << endl;
    cout << is_array<float>::value << endl;
    cout << is_array<int>::value << endl;
    cout << is_array<int[]>::value << endl;
    cout << is_array<int[3]>::value << endl;
    cout << is_array<array<int,3>>::value << endl;
    return 0;
}
